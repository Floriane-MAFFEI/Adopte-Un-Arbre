security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check # or api_login_check as defined in config/routes.yaml
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure   
            custom_authenticator: App\Security\AppAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
 
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_security_login
                check_path: app_security_login
            logout:
                path: app_security_logout
                # where to redirect after logout
                # target: app_any_route     
            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/organisms, roles: ROLE_ADMIN, methods: [POST, PUT, PATCH, DELETE] }
        - { path: ^/api/projects, roles: ROLE_MANAGER, methods: [POST, PUT, PATCH, DELETE] }
        - { path: ^/api/trees, roles: ROLE_MANAGER, methods: [POST, PUT, PATCH, DELETE] }
        - { path: ^/api/species, roles: ROLE_MANAGER, methods: [POST, PUT, PATCH, DELETE] }
        - { path: ^/api/species/\d+/adopt, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods: [GET, PUT, PATCH, DELETE] }
        - { path: ^/api,       roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_MANAGER }


    # Pour économiser des lignes dans notre ACL et rendre l'application plus logique on hiérarchise les rôles
    role_hierarchy:
        # L'admin a les droits du manager
        ROLE_ADMIN: ROLE_MANAGER
        # Le manager a les droits du user (par défaut tous les users sont user à la création dans symfo)
        ROLE_MANAGER: ROLE_USER


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
